CCS PCM C Compiler, Version 5.025, 63725               11-nov.-22 02:45

               Filename:   C:\Users\juand\Desktop\termocu\termocupla.lst

               ROM used:   1720 words (21%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           71 (19%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   644
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
011E:  MOVLW  8E
011F:  MOVWF  77
0120:  MOVF   49,W
0121:  MOVWF  78
0122:  MOVF   48,W
0123:  MOVWF  79
0124:  CLRF   7A
0125:  MOVF   78,F
0126:  BTFSS  03.2
0127:  GOTO   132
0128:  MOVF   79,W
0129:  MOVWF  78
012A:  CLRF   79
012B:  MOVLW  08
012C:  SUBWF  77,F
012D:  MOVF   78,F
012E:  BTFSS  03.2
012F:  GOTO   132
0130:  CLRF   77
0131:  GOTO   13A
0132:  BCF    03.0
0133:  BTFSC  78.7
0134:  GOTO   139
0135:  RLF    79,F
0136:  RLF    78,F
0137:  DECF   77,F
0138:  GOTO   132
0139:  BCF    78.7
*
0151:  MOVLW  80
0152:  BTFSC  03.1
0153:  XORWF  51,F
0154:  CLRF   56
0155:  CLRF   57
0156:  MOVF   4D,W
0157:  MOVWF  55
0158:  MOVF   51,W
0159:  XORWF  55,F
015A:  MOVF   4C,W
015B:  BTFSC  03.2
015C:  GOTO   241
015D:  MOVWF  54
015E:  MOVWF  77
015F:  MOVF   50,W
0160:  BTFSC  03.2
0161:  GOTO   24A
0162:  SUBWF  54,F
0163:  BTFSC  03.2
0164:  GOTO   1E6
0165:  BTFSS  03.0
0166:  GOTO   1A4
0167:  MOVF   51,W
0168:  MOVWF  5A
0169:  BSF    5A.7
016A:  MOVF   52,W
016B:  MOVWF  59
016C:  MOVF   53,W
016D:  MOVWF  58
016E:  CLRF   57
016F:  BCF    03.0
0170:  RRF    5A,F
0171:  RRF    59,F
0172:  RRF    58,F
0173:  RRF    57,F
0174:  DECFSZ 54,F
0175:  GOTO   16E
0176:  BTFSS  55.7
0177:  GOTO   17B
0178:  BSF    56.0
0179:  GOTO   25E
017A:  BCF    56.0
017B:  BCF    54.0
017C:  BSF    56.4
017D:  MOVLW  4F
017E:  MOVWF  04
017F:  BCF    03.7
0180:  GOTO   273
0181:  BCF    56.4
0182:  BTFSC  55.7
0183:  GOTO   18E
0184:  BTFSS  54.0
0185:  GOTO   199
0186:  RRF    5A,F
0187:  RRF    59,F
0188:  RRF    58,F
0189:  RRF    57,F
018A:  INCF   77,F
018B:  BTFSC  03.2
018C:  GOTO   259
018D:  GOTO   199
018E:  BTFSC  5A.7
018F:  GOTO   19C
0190:  BCF    03.0
0191:  RLF    57,F
0192:  RLF    58,F
0193:  RLF    59,F
0194:  RLF    5A,F
0195:  DECF   77,F
0196:  BTFSC  03.2
0197:  GOTO   259
0198:  GOTO   18E
0199:  BSF    56.6
019A:  GOTO   206
019B:  BCF    56.6
019C:  MOVF   4D,W
019D:  MOVWF  55
019E:  BTFSS  55.7
019F:  GOTO   1A2
01A0:  BSF    5A.7
01A1:  GOTO   252
01A2:  BCF    5A.7
01A3:  GOTO   252
01A4:  MOVF   50,W
01A5:  MOVWF  54
01A6:  MOVWF  77
01A7:  MOVF   4C,W
01A8:  SUBWF  54,F
01A9:  MOVF   4D,W
01AA:  MOVWF  5A
01AB:  BSF    5A.7
01AC:  MOVF   4E,W
01AD:  MOVWF  59
01AE:  MOVF   4F,W
01AF:  MOVWF  58
01B0:  CLRF   57
01B1:  BCF    03.0
01B2:  RRF    5A,F
01B3:  RRF    59,F
01B4:  RRF    58,F
01B5:  RRF    57,F
01B6:  DECFSZ 54,F
01B7:  GOTO   1B0
01B8:  BTFSS  55.7
01B9:  GOTO   1BD
01BA:  BSF    56.1
01BB:  GOTO   25E
01BC:  BCF    56.1
01BD:  BCF    54.0
01BE:  BSF    56.5
01BF:  MOVLW  53
01C0:  MOVWF  04
01C1:  BCF    03.7
01C2:  GOTO   273
01C3:  BCF    56.5
01C4:  BTFSC  55.7
01C5:  GOTO   1D0
01C6:  BTFSS  54.0
01C7:  GOTO   1DB
01C8:  RRF    5A,F
01C9:  RRF    59,F
01CA:  RRF    58,F
01CB:  RRF    57,F
01CC:  INCF   77,F
01CD:  BTFSC  03.2
01CE:  GOTO   259
01CF:  GOTO   1DB
01D0:  BTFSC  5A.7
01D1:  GOTO   1DE
01D2:  BCF    03.0
01D3:  RLF    57,F
01D4:  RLF    58,F
01D5:  RLF    59,F
01D6:  RLF    5A,F
01D7:  DECF   77,F
01D8:  BTFSC  03.2
01D9:  GOTO   259
01DA:  GOTO   1D0
01DB:  BSF    56.7
01DC:  GOTO   206
01DD:  BCF    56.7
01DE:  MOVF   51,W
01DF:  MOVWF  55
01E0:  BTFSS  55.7
01E1:  GOTO   1E4
01E2:  BSF    5A.7
01E3:  GOTO   252
01E4:  BCF    5A.7
01E5:  GOTO   252
01E6:  MOVF   51,W
01E7:  MOVWF  5A
01E8:  BSF    5A.7
01E9:  MOVF   52,W
01EA:  MOVWF  59
01EB:  MOVF   53,W
01EC:  MOVWF  58
01ED:  BTFSS  55.7
01EE:  GOTO   1F3
01EF:  BCF    5A.7
01F0:  BSF    56.2
01F1:  GOTO   25E
01F2:  BCF    56.2
01F3:  CLRF   57
01F4:  BCF    54.0
01F5:  MOVLW  4F
01F6:  MOVWF  04
01F7:  BCF    03.7
01F8:  GOTO   273
01F9:  BTFSC  55.7
01FA:  GOTO   21C
01FB:  MOVF   4D,W
01FC:  MOVWF  55
01FD:  BTFSS  54.0
01FE:  GOTO   206
01FF:  RRF    5A,F
0200:  RRF    59,F
0201:  RRF    58,F
0202:  RRF    57,F
0203:  INCF   77,F
0204:  BTFSC  03.2
0205:  GOTO   259
0206:  BTFSS  57.7
0207:  GOTO   217
0208:  INCF   58,F
0209:  BTFSS  03.2
020A:  GOTO   217
020B:  INCF   59,F
020C:  BTFSS  03.2
020D:  GOTO   217
020E:  INCF   5A,F
020F:  BTFSS  03.2
0210:  GOTO   217
0211:  RRF    5A,F
0212:  RRF    59,F
0213:  RRF    58,F
0214:  INCF   77,F
0215:  BTFSC  03.2
0216:  GOTO   259
0217:  BTFSC  56.6
0218:  GOTO   19B
0219:  BTFSC  56.7
021A:  GOTO   1DD
021B:  GOTO   23B
021C:  MOVLW  80
021D:  XORWF  5A,F
021E:  BTFSS  5A.7
021F:  GOTO   224
0220:  GOTO   25E
0221:  MOVF   51,W
0222:  MOVWF  55
0223:  GOTO   231
0224:  MOVF   4D,W
0225:  MOVWF  55
0226:  MOVF   5A,F
0227:  BTFSS  03.2
0228:  GOTO   231
0229:  MOVF   59,F
022A:  BTFSS  03.2
022B:  GOTO   231
022C:  MOVF   58,F
022D:  BTFSS  03.2
022E:  GOTO   231
022F:  CLRF   77
0230:  GOTO   252
0231:  BTFSC  5A.7
0232:  GOTO   23B
0233:  BCF    03.0
0234:  RLF    57,F
0235:  RLF    58,F
0236:  RLF    59,F
0237:  RLF    5A,F
0238:  DECFSZ 77,F
0239:  GOTO   231
023A:  GOTO   259
023B:  BTFSS  55.7
023C:  GOTO   23F
023D:  BSF    5A.7
023E:  GOTO   252
023F:  BCF    5A.7
0240:  GOTO   252
0241:  MOVF   50,W
0242:  MOVWF  77
0243:  MOVF   51,W
0244:  MOVWF  5A
0245:  MOVF   52,W
0246:  MOVWF  59
0247:  MOVF   53,W
0248:  MOVWF  58
0249:  GOTO   252
024A:  MOVF   4C,W
024B:  MOVWF  77
024C:  MOVF   4D,W
024D:  MOVWF  5A
024E:  MOVF   4E,W
024F:  MOVWF  59
0250:  MOVF   4F,W
0251:  MOVWF  58
0252:  MOVF   5A,W
0253:  MOVWF  78
0254:  MOVF   59,W
0255:  MOVWF  79
0256:  MOVF   58,W
0257:  MOVWF  7A
0258:  GOTO   291
0259:  CLRF   77
025A:  CLRF   78
025B:  CLRF   79
025C:  CLRF   7A
025D:  GOTO   291
025E:  CLRF   57
025F:  COMF   58,F
0260:  COMF   59,F
0261:  COMF   5A,F
0262:  COMF   57,F
0263:  INCF   57,F
0264:  BTFSS  03.2
0265:  GOTO   26C
0266:  INCF   58,F
0267:  BTFSS  03.2
0268:  GOTO   26C
0269:  INCF   59,F
026A:  BTFSC  03.2
026B:  INCF   5A,F
026C:  BTFSC  56.0
026D:  GOTO   17A
026E:  BTFSC  56.1
026F:  GOTO   1BC
0270:  BTFSC  56.2
0271:  GOTO   1F2
0272:  GOTO   221
0273:  MOVF   00,W
0274:  ADDWF  58,F
0275:  BTFSS  03.0
0276:  GOTO   27D
0277:  INCF   59,F
0278:  BTFSS  03.2
0279:  GOTO   27D
027A:  INCF   5A,F
027B:  BTFSC  03.2
027C:  BSF    54.0
027D:  DECF   04,F
027E:  MOVF   00,W
027F:  ADDWF  59,F
0280:  BTFSS  03.0
0281:  GOTO   285
0282:  INCF   5A,F
0283:  BTFSC  03.2
0284:  BSF    54.0
0285:  DECF   04,F
0286:  MOVF   00,W
0287:  BTFSS  00.7
0288:  XORLW  80
0289:  ADDWF  5A,F
028A:  BTFSC  03.0
028B:  BSF    54.0
028C:  BTFSC  56.4
028D:  GOTO   181
028E:  BTFSC  56.5
028F:  GOTO   1C3
0290:  GOTO   1F9
*
02A9:  MOVF   4C,W
02AA:  BTFSC  03.2
02AB:  GOTO   36E
02AC:  MOVWF  58
02AD:  MOVF   50,W
02AE:  BTFSC  03.2
02AF:  GOTO   36E
02B0:  SUBWF  58,F
02B1:  BTFSS  03.0
02B2:  GOTO   2B8
02B3:  MOVLW  7F
02B4:  ADDWF  58,F
02B5:  BTFSC  03.0
02B6:  GOTO   36E
02B7:  GOTO   2BE
02B8:  MOVLW  81
02B9:  SUBWF  58,F
02BA:  BTFSS  03.0
02BB:  GOTO   36E
02BC:  BTFSC  03.2
02BD:  GOTO   36E
02BE:  MOVF   58,W
02BF:  MOVWF  77
02C0:  CLRF   78
02C1:  CLRF   79
02C2:  CLRF   7A
02C3:  CLRF   57
02C4:  MOVF   4D,W
02C5:  MOVWF  56
02C6:  BSF    56.7
02C7:  MOVF   4E,W
02C8:  MOVWF  55
02C9:  MOVF   4F,W
02CA:  MOVWF  54
02CB:  MOVLW  19
02CC:  MOVWF  58
02CD:  MOVF   53,W
02CE:  SUBWF  54,F
02CF:  BTFSC  03.0
02D0:  GOTO   2E1
02D1:  MOVLW  01
02D2:  SUBWF  55,F
02D3:  BTFSC  03.0
02D4:  GOTO   2E1
02D5:  SUBWF  56,F
02D6:  BTFSC  03.0
02D7:  GOTO   2E1
02D8:  SUBWF  57,F
02D9:  BTFSC  03.0
02DA:  GOTO   2E1
02DB:  INCF   57,F
02DC:  INCF   56,F
02DD:  INCF   55,F
02DE:  MOVF   53,W
02DF:  ADDWF  54,F
02E0:  GOTO   313
02E1:  MOVF   52,W
02E2:  SUBWF  55,F
02E3:  BTFSC  03.0
02E4:  GOTO   2FC
02E5:  MOVLW  01
02E6:  SUBWF  56,F
02E7:  BTFSC  03.0
02E8:  GOTO   2FC
02E9:  SUBWF  57,F
02EA:  BTFSC  03.0
02EB:  GOTO   2FC
02EC:  INCF   57,F
02ED:  INCF   56,F
02EE:  MOVF   52,W
02EF:  ADDWF  55,F
02F0:  MOVF   53,W
02F1:  ADDWF  54,F
02F2:  BTFSS  03.0
02F3:  GOTO   313
02F4:  INCF   55,F
02F5:  BTFSS  03.2
02F6:  GOTO   313
02F7:  INCF   56,F
02F8:  BTFSS  03.2
02F9:  GOTO   313
02FA:  INCF   57,F
02FB:  GOTO   313
02FC:  MOVF   51,W
02FD:  IORLW  80
02FE:  SUBWF  56,F
02FF:  BTFSC  03.0
0300:  GOTO   312
0301:  MOVLW  01
0302:  SUBWF  57,F
0303:  BTFSC  03.0
0304:  GOTO   312
0305:  INCF   57,F
0306:  MOVF   51,W
0307:  IORLW  80
0308:  ADDWF  56,F
0309:  MOVF   52,W
030A:  ADDWF  55,F
030B:  BTFSS  03.0
030C:  GOTO   2F0
030D:  INCF   56,F
030E:  BTFSS  03.2
030F:  GOTO   2F0
0310:  INCF   57,F
0311:  GOTO   2F0
0312:  BSF    7A.0
0313:  DECFSZ 58,F
0314:  GOTO   316
0315:  GOTO   321
0316:  BCF    03.0
0317:  RLF    54,F
0318:  RLF    55,F
0319:  RLF    56,F
031A:  RLF    57,F
031B:  BCF    03.0
031C:  RLF    7A,F
031D:  RLF    79,F
031E:  RLF    78,F
031F:  RLF    59,F
0320:  GOTO   2CD
0321:  BTFSS  59.0
0322:  GOTO   329
0323:  BCF    03.0
0324:  RRF    78,F
0325:  RRF    79,F
0326:  RRF    7A,F
0327:  RRF    59,F
0328:  GOTO   32C
0329:  DECF   77,F
032A:  BTFSC  03.2
032B:  GOTO   36E
032C:  BTFSC  59.7
032D:  GOTO   355
032E:  BCF    03.0
032F:  RLF    54,F
0330:  RLF    55,F
0331:  RLF    56,F
0332:  RLF    57,F
0333:  MOVF   53,W
0334:  SUBWF  54,F
0335:  BTFSC  03.0
0336:  GOTO   341
0337:  MOVLW  01
0338:  SUBWF  55,F
0339:  BTFSC  03.0
033A:  GOTO   341
033B:  SUBWF  56,F
033C:  BTFSC  03.0
033D:  GOTO   341
033E:  SUBWF  57,F
033F:  BTFSS  03.0
0340:  GOTO   364
0341:  MOVF   52,W
0342:  SUBWF  55,F
0343:  BTFSC  03.0
0344:  GOTO   34C
0345:  MOVLW  01
0346:  SUBWF  56,F
0347:  BTFSC  03.0
0348:  GOTO   34C
0349:  SUBWF  57,F
034A:  BTFSS  03.0
034B:  GOTO   364
034C:  MOVF   51,W
034D:  IORLW  80
034E:  SUBWF  56,F
034F:  BTFSC  03.0
0350:  GOTO   355
0351:  MOVLW  01
0352:  SUBWF  57,F
0353:  BTFSS  03.0
0354:  GOTO   364
0355:  INCF   7A,F
0356:  BTFSS  03.2
0357:  GOTO   364
0358:  INCF   79,F
0359:  BTFSS  03.2
035A:  GOTO   364
035B:  INCF   78,F
035C:  BTFSS  03.2
035D:  GOTO   364
035E:  INCF   77,F
035F:  BTFSC  03.2
0360:  GOTO   36E
0361:  RRF    78,F
0362:  RRF    79,F
0363:  RRF    7A,F
0364:  MOVF   4D,W
0365:  MOVWF  58
0366:  MOVF   51,W
0367:  XORWF  58,F
0368:  BTFSS  58.7
0369:  GOTO   36C
036A:  BSF    78.7
036B:  GOTO   372
036C:  BCF    78.7
036D:  GOTO   372
036E:  CLRF   77
036F:  CLRF   78
0370:  CLRF   79
0371:  CLRF   7A
*
0373:  MOVF   55,W
0374:  BTFSC  03.2
0375:  GOTO   3E3
0376:  MOVWF  5D
0377:  MOVF   59,W
0378:  BTFSC  03.2
0379:  GOTO   3E3
037A:  ADDWF  5D,F
037B:  BTFSC  03.0
037C:  GOTO   384
037D:  MOVLW  7F
037E:  SUBWF  5D,F
037F:  BTFSS  03.0
0380:  GOTO   3E3
0381:  BTFSC  03.2
0382:  GOTO   3E3
0383:  GOTO   388
0384:  MOVLW  81
0385:  ADDWF  5D,F
0386:  BTFSC  03.0
0387:  GOTO   3E3
0388:  MOVF   5D,W
0389:  MOVWF  77
038A:  CLRF   78
038B:  CLRF   79
038C:  CLRF   7A
038D:  MOVF   56,W
038E:  MOVWF  61
038F:  BSF    61.7
0390:  MOVF   57,W
0391:  MOVWF  60
0392:  MOVF   58,W
0393:  MOVWF  5F
0394:  MOVLW  18
0395:  MOVWF  5D
0396:  CLRF   5E
0397:  BTFSS  5F.0
0398:  GOTO   3B1
0399:  MOVF   5C,W
039A:  ADDWF  7A,F
039B:  BTFSS  03.0
039C:  GOTO   3A3
039D:  INCF   79,F
039E:  BTFSS  03.2
039F:  GOTO   3A3
03A0:  INCF   78,F
03A1:  BTFSC  03.2
03A2:  BSF    5E.7
03A3:  MOVF   5B,W
03A4:  ADDWF  79,F
03A5:  BTFSS  03.0
03A6:  GOTO   3AA
03A7:  INCF   78,F
03A8:  BTFSC  03.2
03A9:  BSF    5E.7
03AA:  MOVF   5A,W
03AB:  MOVWF  57
03AC:  BSF    57.7
03AD:  MOVF   57,W
03AE:  ADDWF  78,F
03AF:  BTFSC  03.0
03B0:  BSF    5E.7
03B1:  RLF    5E,F
03B2:  RRF    78,F
03B3:  RRF    79,F
03B4:  RRF    7A,F
03B5:  RRF    61,F
03B6:  RRF    60,F
03B7:  RRF    5F,F
03B8:  BCF    03.0
03B9:  DECFSZ 5D,F
03BA:  GOTO   396
03BB:  MOVLW  01
03BC:  ADDWF  77,F
03BD:  BTFSC  03.0
03BE:  GOTO   3E3
03BF:  BTFSC  78.7
03C0:  GOTO   3C8
03C1:  RLF    61,F
03C2:  RLF    7A,F
03C3:  RLF    79,F
03C4:  RLF    78,F
03C5:  DECF   77,F
03C6:  BTFSC  03.2
03C7:  GOTO   3E3
03C8:  BTFSS  61.7
03C9:  GOTO   3D9
03CA:  INCF   7A,F
03CB:  BTFSS  03.2
03CC:  GOTO   3D9
03CD:  INCF   79,F
03CE:  BTFSS  03.2
03CF:  GOTO   3D9
03D0:  INCF   78,F
03D1:  BTFSS  03.2
03D2:  GOTO   3D9
03D3:  RRF    78,F
03D4:  RRF    79,F
03D5:  RRF    7A,F
03D6:  INCF   77,F
03D7:  BTFSC  03.2
03D8:  GOTO   3E3
03D9:  MOVF   56,W
03DA:  MOVWF  5E
03DB:  MOVF   5A,W
03DC:  XORWF  5E,F
03DD:  BTFSS  5E.7
03DE:  GOTO   3E1
03DF:  BSF    78.7
03E0:  GOTO   3E7
03E1:  BCF    78.7
03E2:  GOTO   3E7
03E3:  CLRF   77
03E4:  CLRF   78
03E5:  CLRF   79
03E6:  CLRF   7A
03E7:  RETURN
03E8:  MOVF   55,W
03E9:  SUBLW  B6
03EA:  MOVWF  55
03EB:  CLRF   7A
03EC:  MOVF   56,W
03ED:  MOVWF  59
03EE:  BSF    56.7
03EF:  BCF    03.0
03F0:  RRF    56,F
03F1:  RRF    57,F
03F2:  RRF    58,F
03F3:  RRF    7A,F
03F4:  RRF    79,F
03F5:  RRF    78,F
03F6:  RRF    77,F
03F7:  DECFSZ 55,F
03F8:  GOTO   3EF
03F9:  BTFSS  59.7
03FA:  GOTO   406
03FB:  COMF   77,F
03FC:  COMF   78,F
03FD:  COMF   79,F
03FE:  COMF   7A,F
03FF:  INCF   77,F
0400:  BTFSC  03.2
0401:  INCF   78,F
0402:  BTFSC  03.2
0403:  INCF   79,F
0404:  BTFSC  03.2
0405:  INCF   7A,F
0406:  RETURN
0407:  BTFSC  03.1
0408:  GOTO   40C
0409:  MOVLW  5D
040A:  MOVWF  04
040B:  BCF    03.7
040C:  CLRF   77
040D:  CLRF   78
040E:  CLRF   79
040F:  CLRF   7A
0410:  CLRF   5D
0411:  CLRF   5E
0412:  CLRF   5F
0413:  CLRF   60
0414:  MOVF   5C,W
0415:  IORWF  5B,W
0416:  IORWF  5A,W
0417:  IORWF  59,W
0418:  BTFSC  03.2
0419:  GOTO   44A
041A:  MOVLW  20
041B:  MOVWF  61
041C:  BCF    03.0
041D:  RLF    55,F
041E:  RLF    56,F
041F:  RLF    57,F
0420:  RLF    58,F
0421:  RLF    5D,F
0422:  RLF    5E,F
0423:  RLF    5F,F
0424:  RLF    60,F
0425:  MOVF   5C,W
0426:  SUBWF  60,W
0427:  BTFSS  03.2
0428:  GOTO   433
0429:  MOVF   5B,W
042A:  SUBWF  5F,W
042B:  BTFSS  03.2
042C:  GOTO   433
042D:  MOVF   5A,W
042E:  SUBWF  5E,W
042F:  BTFSS  03.2
0430:  GOTO   433
0431:  MOVF   59,W
0432:  SUBWF  5D,W
0433:  BTFSS  03.0
0434:  GOTO   444
0435:  MOVF   59,W
0436:  SUBWF  5D,F
0437:  MOVF   5A,W
0438:  BTFSS  03.0
0439:  INCFSZ 5A,W
043A:  SUBWF  5E,F
043B:  MOVF   5B,W
043C:  BTFSS  03.0
043D:  INCFSZ 5B,W
043E:  SUBWF  5F,F
043F:  MOVF   5C,W
0440:  BTFSS  03.0
0441:  INCFSZ 5C,W
0442:  SUBWF  60,F
0443:  BSF    03.0
0444:  RLF    77,F
0445:  RLF    78,F
0446:  RLF    79,F
0447:  RLF    7A,F
0448:  DECFSZ 61,F
0449:  GOTO   41C
044A:  MOVF   5D,W
044B:  MOVWF  00
044C:  INCF   04,F
044D:  MOVF   5E,W
044E:  MOVWF  00
044F:  INCF   04,F
0450:  MOVF   5F,W
0451:  MOVWF  00
0452:  INCF   04,F
0453:  MOVF   60,W
0454:  MOVWF  00
0455:  RETURN
0456:  MOVF   22,W
0457:  MOVWF  04
0458:  BCF    03.7
0459:  BTFSC  23.0
045A:  BSF    03.7
045B:  MOVF   55,W
045C:  MOVWF  00
045D:  INCF   04,F
045E:  CLRF   00
045F:  INCF   22,F
0460:  BTFSC  03.2
0461:  INCF   23,F
0462:  RETURN
0463:  MOVF   04,W
0464:  MOVWF  4D
0465:  MOVF   4C,W
0466:  MOVWF  4F
0467:  BTFSC  03.2
0468:  GOTO   482
0469:  MOVF   4B,W
046A:  MOVWF  58
046B:  MOVF   4A,W
046C:  MOVWF  57
046D:  MOVF   49,W
046E:  MOVWF  56
046F:  MOVF   48,W
0470:  MOVWF  55
0471:  CLRF   5C
0472:  CLRF   5B
0473:  MOVLW  20
0474:  MOVWF  5A
0475:  MOVLW  82
0476:  MOVWF  59
0477:  CALL   373
0478:  MOVF   7A,W
0479:  MOVWF  4B
047A:  MOVF   79,W
047B:  MOVWF  4A
047C:  MOVF   78,W
047D:  MOVWF  49
047E:  MOVF   77,W
047F:  MOVWF  48
0480:  DECFSZ 4F,F
0481:  GOTO   469
0482:  MOVF   4B,W
0483:  MOVWF  58
0484:  MOVF   4A,W
0485:  MOVWF  57
0486:  MOVF   49,W
0487:  MOVWF  56
0488:  MOVF   48,W
0489:  MOVWF  55
048A:  CALL   3E8
048B:  MOVF   7A,W
048C:  MOVWF  4B
048D:  MOVF   79,W
048E:  MOVWF  4A
048F:  MOVF   78,W
0490:  MOVWF  49
0491:  MOVF   77,W
0492:  MOVWF  48
0493:  BTFSS  4B.7
0494:  GOTO   4A2
0495:  DECF   4D,F
0496:  BSF    4D.5
0497:  COMF   48,F
0498:  COMF   49,F
0499:  COMF   4A,F
049A:  COMF   4B,F
049B:  INCF   48,F
049C:  BTFSC  03.2
049D:  INCF   49,F
049E:  BTFSC  03.2
049F:  INCF   4A,F
04A0:  BTFSC  03.2
04A1:  INCF   4B,F
04A2:  MOVLW  3B
04A3:  MOVWF  54
04A4:  MOVLW  9A
04A5:  MOVWF  53
04A6:  MOVLW  CA
04A7:  MOVWF  52
04A8:  CLRF   51
04A9:  MOVLW  0A
04AA:  MOVWF  4F
04AB:  MOVF   4C,W
04AC:  BTFSC  03.2
04AD:  INCF   4D,F
04AE:  BSF    03.1
04AF:  MOVLW  48
04B0:  MOVWF  04
04B1:  BCF    03.7
04B2:  MOVF   4B,W
04B3:  MOVWF  58
04B4:  MOVF   4A,W
04B5:  MOVWF  57
04B6:  MOVF   49,W
04B7:  MOVWF  56
04B8:  MOVF   48,W
04B9:  MOVWF  55
04BA:  MOVF   54,W
04BB:  MOVWF  5C
04BC:  MOVF   53,W
04BD:  MOVWF  5B
04BE:  MOVF   52,W
04BF:  MOVWF  5A
04C0:  MOVF   51,W
04C1:  MOVWF  59
04C2:  CALL   407
04C3:  MOVF   78,W
04C4:  MOVF   77,F
04C5:  BTFSS  03.2
04C6:  GOTO   4DA
04C7:  INCF   4C,W
04C8:  SUBWF  4F,W
04C9:  BTFSC  03.2
04CA:  GOTO   4DA
04CB:  MOVF   4D,W
04CC:  BTFSC  03.2
04CD:  GOTO   4DC
04CE:  ANDLW  0F
04CF:  SUBWF  4F,W
04D0:  BTFSC  03.2
04D1:  GOTO   4D4
04D2:  BTFSC  03.0
04D3:  GOTO   50C
04D4:  BTFSC  4D.7
04D5:  GOTO   50C
04D6:  BTFSC  4D.6
04D7:  GOTO   4DC
04D8:  MOVLW  20
04D9:  GOTO   508
04DA:  MOVLW  20
04DB:  ANDWF  4D,F
04DC:  BTFSS  4D.5
04DD:  GOTO   4EA
04DE:  BCF    4D.5
04DF:  MOVF   4C,W
04E0:  BTFSS  03.2
04E1:  DECF   4D,F
04E2:  MOVF   77,W
04E3:  MOVWF  4D
04E4:  MOVLW  2D
04E5:  MOVWF  55
04E6:  CALL   456
04E7:  MOVF   4D,W
04E8:  MOVWF  77
04E9:  CLRF   4D
04EA:  MOVF   4C,W
04EB:  SUBWF  4F,W
04EC:  BTFSS  03.2
04ED:  GOTO   4F8
04EE:  MOVF   77,W
04EF:  MOVWF  4D
04F0:  MOVLW  2E
04F1:  MOVWF  55
04F2:  CALL   456
04F3:  MOVF   4D,W
04F4:  MOVWF  77
04F5:  MOVLW  20
04F6:  ANDWF  4D,F
04F7:  MOVLW  00
04F8:  MOVLW  30
04F9:  BTFSS  4D.5
04FA:  GOTO   508
04FB:  BCF    4D.5
04FC:  MOVF   4C,W
04FD:  BTFSS  03.2
04FE:  DECF   4D,F
04FF:  MOVF   77,W
0500:  MOVWF  4D
0501:  MOVLW  2D
0502:  MOVWF  55
0503:  CALL   456
0504:  MOVF   4D,W
0505:  MOVWF  77
0506:  CLRF   4D
0507:  MOVLW  30
0508:  ADDWF  77,F
0509:  MOVF   77,W
050A:  MOVWF  55
050B:  CALL   456
050C:  BCF    03.1
050D:  MOVF   54,W
050E:  MOVWF  58
050F:  MOVF   53,W
0510:  MOVWF  57
0511:  MOVF   52,W
0512:  MOVWF  56
0513:  MOVF   51,W
0514:  MOVWF  55
0515:  CLRF   5C
0516:  CLRF   5B
0517:  CLRF   5A
0518:  MOVLW  0A
0519:  MOVWF  59
051A:  CALL   407
051B:  MOVF   7A,W
051C:  MOVWF  54
051D:  MOVF   79,W
051E:  MOVWF  53
051F:  MOVF   78,W
0520:  MOVWF  52
0521:  MOVF   77,W
0522:  MOVWF  51
0523:  DECFSZ 4F,F
0524:  GOTO   4AE
0525:  BCF    0A.3
0526:  BCF    0A.4
0527:  GOTO   680 (RETURN)
*
0566:  MOVF   04,W
0567:  MOVWF  4D
0568:  MOVF   4C,W
0569:  MOVWF  4F
056A:  BTFSC  03.2
056B:  GOTO   585
056C:  MOVF   4B,W
056D:  MOVWF  58
056E:  MOVF   4A,W
056F:  MOVWF  57
0570:  MOVF   49,W
0571:  MOVWF  56
0572:  MOVF   48,W
0573:  MOVWF  55
0574:  CLRF   5C
0575:  CLRF   5B
0576:  MOVLW  20
0577:  MOVWF  5A
0578:  MOVLW  82
0579:  MOVWF  59
057A:  CALL   373
057B:  MOVF   7A,W
057C:  MOVWF  4B
057D:  MOVF   79,W
057E:  MOVWF  4A
057F:  MOVF   78,W
0580:  MOVWF  49
0581:  MOVF   77,W
0582:  MOVWF  48
0583:  DECFSZ 4F,F
0584:  GOTO   56C
0585:  MOVF   4B,W
0586:  MOVWF  58
0587:  MOVF   4A,W
0588:  MOVWF  57
0589:  MOVF   49,W
058A:  MOVWF  56
058B:  MOVF   48,W
058C:  MOVWF  55
058D:  CALL   3E8
058E:  MOVF   7A,W
058F:  MOVWF  4B
0590:  MOVF   79,W
0591:  MOVWF  4A
0592:  MOVF   78,W
0593:  MOVWF  49
0594:  MOVF   77,W
0595:  MOVWF  48
0596:  BTFSS  4B.7
0597:  GOTO   5A5
0598:  DECF   4D,F
0599:  BSF    4D.5
059A:  COMF   48,F
059B:  COMF   49,F
059C:  COMF   4A,F
059D:  COMF   4B,F
059E:  INCF   48,F
059F:  BTFSC  03.2
05A0:  INCF   49,F
05A1:  BTFSC  03.2
05A2:  INCF   4A,F
05A3:  BTFSC  03.2
05A4:  INCF   4B,F
05A5:  MOVLW  3B
05A6:  MOVWF  54
05A7:  MOVLW  9A
05A8:  MOVWF  53
05A9:  MOVLW  CA
05AA:  MOVWF  52
05AB:  CLRF   51
05AC:  MOVLW  0A
05AD:  MOVWF  4F
05AE:  MOVF   4C,W
05AF:  BTFSC  03.2
05B0:  INCF   4D,F
05B1:  BSF    03.1
05B2:  MOVLW  48
05B3:  MOVWF  04
05B4:  BCF    03.7
05B5:  MOVF   4B,W
05B6:  MOVWF  58
05B7:  MOVF   4A,W
05B8:  MOVWF  57
05B9:  MOVF   49,W
05BA:  MOVWF  56
05BB:  MOVF   48,W
05BC:  MOVWF  55
05BD:  MOVF   54,W
05BE:  MOVWF  5C
05BF:  MOVF   53,W
05C0:  MOVWF  5B
05C1:  MOVF   52,W
05C2:  MOVWF  5A
05C3:  MOVF   51,W
05C4:  MOVWF  59
05C5:  CALL   407
05C6:  MOVF   78,W
05C7:  MOVF   77,F
05C8:  BTFSS  03.2
05C9:  GOTO   5DD
05CA:  INCF   4C,W
05CB:  SUBWF  4F,W
05CC:  BTFSC  03.2
05CD:  GOTO   5DD
05CE:  MOVF   4D,W
05CF:  BTFSC  03.2
05D0:  GOTO   5DF
05D1:  ANDLW  0F
05D2:  SUBWF  4F,W
05D3:  BTFSC  03.2
05D4:  GOTO   5D7
05D5:  BTFSC  03.0
05D6:  GOTO   60F
05D7:  BTFSC  4D.7
05D8:  GOTO   60F
05D9:  BTFSC  4D.6
05DA:  GOTO   5DF
05DB:  MOVLW  20
05DC:  GOTO   60B
05DD:  MOVLW  20
05DE:  ANDWF  4D,F
05DF:  BTFSS  4D.5
05E0:  GOTO   5ED
05E1:  BCF    4D.5
05E2:  MOVF   4C,W
05E3:  BTFSS  03.2
05E4:  DECF   4D,F
05E5:  MOVF   77,W
05E6:  MOVWF  4D
05E7:  MOVLW  2D
05E8:  MOVWF  55
05E9:  CALL   53A
05EA:  MOVF   4D,W
05EB:  MOVWF  77
05EC:  CLRF   4D
05ED:  MOVF   4C,W
05EE:  SUBWF  4F,W
05EF:  BTFSS  03.2
05F0:  GOTO   5FB
05F1:  MOVF   77,W
05F2:  MOVWF  4D
05F3:  MOVLW  2E
05F4:  MOVWF  55
05F5:  CALL   53A
05F6:  MOVF   4D,W
05F7:  MOVWF  77
05F8:  MOVLW  20
05F9:  ANDWF  4D,F
05FA:  MOVLW  00
05FB:  MOVLW  30
05FC:  BTFSS  4D.5
05FD:  GOTO   60B
05FE:  BCF    4D.5
05FF:  MOVF   4C,W
0600:  BTFSS  03.2
0601:  DECF   4D,F
0602:  MOVF   77,W
0603:  MOVWF  4D
0604:  MOVLW  2D
0605:  MOVWF  55
0606:  CALL   53A
0607:  MOVF   4D,W
0608:  MOVWF  77
0609:  CLRF   4D
060A:  MOVLW  30
060B:  ADDWF  77,F
060C:  MOVF   77,W
060D:  MOVWF  55
060E:  CALL   53A
060F:  BCF    03.1
0610:  MOVF   54,W
0611:  MOVWF  58
0612:  MOVF   53,W
0613:  MOVWF  57
0614:  MOVF   52,W
0615:  MOVWF  56
0616:  MOVF   51,W
0617:  MOVWF  55
0618:  CLRF   5C
0619:  CLRF   5B
061A:  CLRF   5A
061B:  MOVLW  0A
061C:  MOVWF  59
061D:  CALL   407
061E:  MOVF   7A,W
061F:  MOVWF  54
0620:  MOVF   79,W
0621:  MOVWF  53
0622:  MOVF   78,W
0623:  MOVWF  52
0624:  MOVF   77,W
0625:  MOVWF  51
0626:  DECFSZ 4F,F
0627:  GOTO   5B1
0628:  BCF    0A.3
0629:  BCF    0A.4
062A:  GOTO   6A6 (RETURN)
062B:  MOVF   00,F
062C:  BTFSC  03.2
062D:  GOTO   641
062E:  CLRF   45
062F:  MOVF   04,W
0630:  MOVWF  44
0631:  BCF    45.0
0632:  BTFSC  03.7
0633:  BSF    45.0
0634:  MOVF   00,W
0635:  BTFSS  0C.4
0636:  GOTO   635
0637:  MOVWF  19
0638:  MOVF   44,W
0639:  MOVWF  04
063A:  BCF    03.7
063B:  BTFSC  45.0
063C:  BSF    03.7
063D:  INCF   04,F
063E:  BTFSC  03.2
063F:  INCF   05,F
0640:  GOTO   62B
0641:  BCF    0A.3
0642:  BCF    0A.4
0643:  GOTO   6B6 (RETURN)
....................  
.................... #list 
....................  
.................... #USE DELAY(CLOCK=4000000) 
*
0004:  MOVLW  56
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,NOPUT,NOLVP 
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7, bits=8) 
.................... #use standard_io(c) 
....................  
....................  
....................  
....................    #define TC_CLK     PIN_C3            //edit these pins as necessary  
....................    #define TC_CS      PIN_C0  
....................    #define TC_DATA    PIN_C4  
....................  
....................  
....................  
.................... #include <lcd.c>                       // Libreria para el manejo de la LCD 20x4                         // libreria mate 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0031:  MOVLW  0F
0032:  BSF    03.5
0033:  ANDWF  08,W
0034:  IORLW  F0
0035:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0036:  BCF    03.5
0037:  BSF    08.2
....................    delay_cycles(1); 
0038:  NOP
....................    lcd_output_enable(1); 
0039:  BSF    08.0
....................    delay_cycles(1); 
003A:  NOP
....................    high = lcd_read_nibble(); 
003B:  CALL   025
003C:  MOVF   78,W
003D:  MOVWF  5D
....................        
....................    lcd_output_enable(0); 
003E:  BCF    08.0
....................    delay_cycles(1); 
003F:  NOP
....................    lcd_output_enable(1); 
0040:  BSF    08.0
....................    delay_us(1); 
0041:  NOP
....................    low = lcd_read_nibble(); 
0042:  CALL   025
0043:  MOVF   78,W
0044:  MOVWF  5C
....................        
....................    lcd_output_enable(0); 
0045:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0046:  MOVLW  0F
0047:  BSF    03.5
0048:  ANDWF  08,W
0049:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
004A:  BCF    03.5
004B:  SWAPF  5D,W
004C:  MOVWF  77
004D:  MOVLW  F0
004E:  ANDWF  77,F
004F:  MOVF   77,W
0050:  IORWF  5C,W
0051:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0025:  MOVF   08,W
0026:  MOVWF  77
0027:  SWAPF  08,W
0028:  ANDLW  0F
0029:  MOVWF  78
....................   #endif 
002A:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0019:  SWAPF  5D,W
001A:  ANDLW  F0
001B:  MOVWF  77
001C:  MOVLW  0F
001D:  ANDWF  08,W
001E:  IORWF  77,W
001F:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0020:  NOP
....................    lcd_output_enable(1); 
0021:  BSF    08.0
....................    delay_us(2); 
0022:  GOTO   023
....................    lcd_output_enable(0); 
0023:  BCF    08.0
0024:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
002B:  BSF    03.5
002C:  BCF    08.0
....................    lcd_rs_tris(); 
002D:  BCF    08.1
....................    lcd_rw_tris(); 
002E:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
002F:  BCF    03.5
0030:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0052:  MOVF   78,W
0053:  MOVWF  5C
0054:  BTFSC  5C.7
0055:  GOTO   031
....................    lcd_output_rs(address); 
0056:  BTFSS  5A.0
0057:  BCF    08.1
0058:  BTFSC  5A.0
0059:  BSF    08.1
....................    delay_cycles(1); 
005A:  NOP
....................    lcd_output_rw(0); 
005B:  BCF    08.2
....................    delay_cycles(1); 
005C:  NOP
....................    lcd_output_enable(0); 
005D:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
005E:  SWAPF  5B,W
005F:  MOVWF  5C
0060:  MOVLW  0F
0061:  ANDWF  5C,F
0062:  MOVF   5C,W
0063:  MOVWF  5D
0064:  CALL   019
....................    lcd_send_nibble(n & 0xf); 
0065:  MOVF   5B,W
0066:  ANDLW  0F
0067:  MOVWF  5C
0068:  MOVWF  5D
0069:  CALL   019
006A:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
006B:  MOVLW  28
006C:  MOVWF  45
006D:  MOVLW  0C
006E:  MOVWF  46
006F:  MOVLW  01
0070:  MOVWF  47
0071:  MOVLW  06
0072:  MOVWF  48
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0073:  BCF    08.0
....................    lcd_output_rs(0); 
0074:  BCF    08.1
....................    lcd_output_rw(0); 
0075:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0076:  MOVLW  0F
0077:  BSF    03.5
0078:  ANDWF  08,W
0079:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
007A:  BCF    08.0
....................    lcd_rs_tris(); 
007B:  BCF    08.1
....................    lcd_rw_tris(); 
007C:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
007D:  MOVLW  0F
007E:  BCF    03.5
007F:  MOVWF  56
0080:  CALL   004
....................    for(i=1;i<=3;++i) 
0081:  MOVLW  01
0082:  MOVWF  44
0083:  MOVF   44,W
0084:  SUBLW  03
0085:  BTFSS  03.0
0086:  GOTO   08F
....................    { 
....................        lcd_send_nibble(3); 
0087:  MOVLW  03
0088:  MOVWF  5D
0089:  CALL   019
....................        delay_ms(5); 
008A:  MOVLW  05
008B:  MOVWF  56
008C:  CALL   004
008D:  INCF   44,F
008E:  GOTO   083
....................    } 
....................     
....................    lcd_send_nibble(2); 
008F:  MOVLW  02
0090:  MOVWF  5D
0091:  CALL   019
....................    delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  56
0094:  CALL   004
....................    for(i=0;i<=3;++i) 
0095:  CLRF   44
0096:  MOVF   44,W
0097:  SUBLW  03
0098:  BTFSS  03.0
0099:  GOTO   0A6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
009A:  MOVLW  45
009B:  ADDWF  44,W
009C:  MOVWF  04
009D:  BCF    03.7
009E:  MOVF   00,W
009F:  MOVWF  49
00A0:  CLRF   5A
00A1:  MOVF   49,W
00A2:  MOVWF  5B
00A3:  CALL   02B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A4:  INCF   44,F
00A5:  GOTO   096
00A6:  BCF    0A.3
00A7:  BCF    0A.4
00A8:  GOTO   65D (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0528:  DECFSZ 57,W
0529:  GOTO   52B
052A:  GOTO   52E
....................       address=LCD_LINE_TWO; 
052B:  MOVLW  40
052C:  MOVWF  58
052D:  GOTO   52F
....................    else 
....................       address=0; 
052E:  CLRF   58
....................       
....................    address+=x-1; 
052F:  MOVLW  01
0530:  SUBWF  56,W
0531:  ADDWF  58,F
....................    lcd_send_byte(0,0x80|address); 
0532:  MOVF   58,W
0533:  IORLW  80
0534:  MOVWF  59
0535:  CLRF   5A
0536:  MOVF   59,W
0537:  MOVWF  5B
0538:  CALL   02B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0539:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
053A:  MOVF   55,W
053B:  XORLW  07
053C:  BTFSC  03.2
053D:  GOTO   548
053E:  XORLW  0B
053F:  BTFSC  03.2
0540:  GOTO   54D
0541:  XORLW  06
0542:  BTFSC  03.2
0543:  GOTO   555
0544:  XORLW  02
0545:  BTFSC  03.2
0546:  GOTO   55B
0547:  GOTO   560
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0548:  MOVLW  01
0549:  MOVWF  56
054A:  MOVWF  57
054B:  CALL   528
054C:  GOTO   565
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
054D:  CLRF   5A
054E:  MOVLW  01
054F:  MOVWF  5B
0550:  CALL   02B
....................                      delay_ms(2); 
0551:  MOVLW  02
0552:  MOVWF  56
0553:  CALL   004
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0554:  GOTO   565
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0555:  MOVLW  01
0556:  MOVWF  56
0557:  MOVLW  02
0558:  MOVWF  57
0559:  CALL   528
055A:  GOTO   565
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
055B:  CLRF   5A
055C:  MOVLW  10
055D:  MOVWF  5B
055E:  CALL   02B
055F:  GOTO   565
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0560:  MOVLW  01
0561:  MOVWF  5A
0562:  MOVF   55,W
0563:  MOVWF  5B
0564:  CALL   02B
....................      #endif 
....................    } 
0565:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <max6675.c>             //libreria termocupla 
.................... /**************************************************************************************  
.................... *   max6675.c - communicates with a MAX6675 thermcouple interface chip                *  
.................... *   Copyright Jimbob's Ma 2006                                                        *  
.................... *                                                                                     *  
.................... *   This program is free software; you can redistribute it and/or                     *  
.................... *   modify it under the terms of the GNU General Public License                       *  
.................... *   as published by the Free Software Foundation version 2                            *  
.................... *   of the License.                                                                   *  
.................... *                                                                                     *  
.................... *   This program is distributed in the hope that it will be useful,                   *  
.................... *   but WITHOUT ANY WARRANTY; without even the implied warranty of                    *  
.................... *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                     *  
.................... *   GNU General Public License for more details.                                      *  
.................... *                                                                                     *  
.................... *   You should have received a copy of the GNU General Public License                 *  
.................... *   along with this program; if not, write to the Free Software                       *  
.................... *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.   *  
.................... **************************************************************************************/  
....................  
.................... /*  
.................... This is a diver for the MAX6675 K-type thermocouple interface chip. It implements an SPI  
.................... bus without the need for dedicated hardware (aka a bit-banged interface). The result from  
.................... toFloat_TC() is the temperature in degrees celcius of the thermocouple tip. The rest should  
.................... be self-evident. Have a look at the end of the file for example usage.  
.................... */  
....................  
.................... #ifndef TC_CLK  
....................    #define TC_CLK     PIN_C3            //edit these pins as necessary  
.................... #endif  
....................  
.................... #ifndef TC_CS  
....................    #define TC_CS      PIN_C0  
.................... #endif  
....................  
.................... #ifndef TC_DATA  
....................    #define TC_DATA    PIN_C4  
.................... #endif  
....................  
....................  
.................... int1 thermocouple_error;         //a handy dandy global error flag to tell you if a thermocouple is connected or not  
....................  
.................... void init_TC(void)  
.................... {  
....................    output_low(TC_CLK);  
*
00A9:  BCF    20.3
00AA:  MOVF   20,W
00AB:  BSF    03.5
00AC:  MOVWF  07
00AD:  BCF    03.5
00AE:  BCF    07.3
....................    output_low(TC_DATA);  
00AF:  BCF    20.4
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
00B3:  BCF    03.5
00B4:  BCF    07.4
....................    output_high(TC_CS);            //if we idle high, the chip keeps doing conversions. Change this if you like  
00B5:  BCF    20.0
00B6:  MOVF   20,W
00B7:  BSF    03.5
00B8:  MOVWF  07
00B9:  BCF    03.5
00BA:  BSF    07.0
.................... }  
....................  
.................... int16 read_TC(void)               //It takes 200ms (ish) for the MAX6675 to perform a conversion  
.................... {  
....................    int8 i;  
....................    int16 data;  
....................  
....................    output_low(TC_CS);            //stop any conversion processes  
*
00BE:  BCF    20.0
00BF:  MOVF   20,W
00C0:  BSF    03.5
00C1:  MOVWF  07
00C2:  BCF    03.5
00C3:  BCF    07.0
....................    delay_ms(1);               //and give it some time to power up (not very much, admittedly)  
00C4:  MOVLW  01
00C5:  MOVWF  56
00C6:  CALL   004
....................  
....................    for (i=0;i<16;i++){  
00C7:  CLRF   44
00C8:  MOVF   44,W
00C9:  SUBLW  0F
00CA:  BTFSS  03.0
00CB:  GOTO   0E8
....................       shift_left(&data,2,input(TC_DATA));      //reads in 2 bytes to data from the pin TC_DATA  
00CC:  BSF    20.4
00CD:  MOVF   20,W
00CE:  BSF    03.5
00CF:  MOVWF  07
00D0:  BCF    03.5
00D1:  BTFSC  07.4
00D2:  GOTO   0D5
00D3:  BCF    03.0
00D4:  GOTO   0D6
00D5:  BSF    03.0
00D6:  RLF    45,F
00D7:  RLF    46,F
....................       output_high(TC_CLK);  
00D8:  BCF    20.3
00D9:  MOVF   20,W
00DA:  BSF    03.5
00DB:  MOVWF  07
00DC:  BCF    03.5
00DD:  BSF    07.3
....................       delay_us(1); //Descomentar si usa crystal mayor a 10MHz 
00DE:  NOP
....................       output_low(TC_CLK);  
00DF:  BCF    20.3
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  BCF    03.5
00E4:  BCF    07.3
....................       delay_us(1); 
00E5:  NOP
00E6:  INCF   44,F
00E7:  GOTO   0C8
....................    }  
....................  
....................    thermocouple_error=bit_test(data,2);      //this is the thermocouple status bit  
00E8:  BCF    21.0
00E9:  BTFSC  45.2
00EA:  BSF    21.0
....................    delay_ms(1);      
00EB:  MOVLW  01
00EC:  MOVWF  56
00ED:  CALL   004
....................    output_high(TC_CS);  
00EE:  BCF    20.0
00EF:  MOVF   20,W
00F0:  BSF    03.5
00F1:  MOVWF  07
00F2:  BCF    03.5
00F3:  BSF    07.0
....................    return(data);  
00F4:  MOVF   45,W
00F5:  MOVWF  78
00F6:  MOVF   46,W
00F7:  MOVWF  79
.................... }  
....................  
.................... int16 sortout(int16 raw)  
.................... {  
....................     return(0x0FFF & (raw>>3));      //returns only the bits converning temperature  
*
0100:  RRF    47,W
0101:  MOVWF  7A
0102:  RRF    46,W
0103:  MOVWF  79
0104:  RRF    7A,F
0105:  RRF    79,F
0106:  RRF    7A,F
0107:  RRF    79,F
0108:  MOVLW  1F
0109:  ANDWF  7A,F
010A:  MOVF   79,W
010B:  MOVWF  77
010C:  MOVLW  0F
010D:  ANDWF  7A,F
010E:  MOVF   79,W
010F:  MOVWF  78
0110:  MOVF   7A,W
0111:  MOVWF  79
.................... }  
....................  
.................... float toFloat_TC(int16 tmp)  
.................... {  
....................    return(((float)tmp-44)/2.021142857);  
*
011A:  MOVF   47,W
011B:  MOVWF  49
011C:  MOVF   46,W
011D:  MOVWF  48
*
013A:  MOVF   7A,W
013B:  MOVWF  4B
013C:  MOVF   79,W
013D:  MOVWF  4A
013E:  MOVF   78,W
013F:  MOVWF  49
0140:  MOVF   77,W
0141:  MOVWF  48
0142:  BSF    03.1
0143:  MOVF   4B,W
0144:  MOVWF  4F
0145:  MOVF   4A,W
0146:  MOVWF  4E
0147:  MOVF   49,W
0148:  MOVWF  4D
0149:  MOVF   48,W
014A:  MOVWF  4C
014B:  CLRF   53
014C:  CLRF   52
014D:  MOVLW  30
014E:  MOVWF  51
014F:  MOVLW  84
0150:  MOVWF  50
*
0291:  MOVF   7A,W
0292:  MOVWF  4B
0293:  MOVF   79,W
0294:  MOVWF  4A
0295:  MOVF   78,W
0296:  MOVWF  49
0297:  MOVF   77,W
0298:  MOVWF  48
0299:  MOVF   4B,W
029A:  MOVWF  4F
029B:  MOVF   4A,W
029C:  MOVWF  4E
029D:  MOVF   49,W
029E:  MOVWF  4D
029F:  MOVF   48,W
02A0:  MOVWF  4C
02A1:  MOVLW  68
02A2:  MOVWF  53
02A3:  MOVLW  5A
02A4:  MOVWF  52
02A5:  MOVLW  01
02A6:  MOVWF  51
02A7:  MOVLW  80
02A8:  MOVWF  50
....................    //return((float)tmp); 
.................... }  
....................  
.................... float do_everything(void)  
.................... {  
....................    init_TC();  
....................    delay_ms(200);               //200ms is a long time to be doing nothing. use a timer interrupt to avoid wasting time here  
*
00BB:  MOVLW  C8
00BC:  MOVWF  56
00BD:  CALL   004
....................    return(toFloat_TC(sortout(read_TC())));  
*
00F8:  MOVF   79,W
00F9:  MOVWF  45
00FA:  MOVF   78,W
00FB:  MOVWF  44
00FC:  MOVF   45,W
00FD:  MOVWF  47
00FE:  MOVF   44,W
00FF:  MOVWF  46
*
0112:  MOVF   79,W
0113:  MOVWF  45
0114:  MOVF   78,W
0115:  MOVWF  44
0116:  MOVF   45,W
0117:  MOVWF  47
0118:  MOVF   44,W
0119:  MOVWF  46
*
0372:  RETURN
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0644:  MOVF   03,W
0645:  ANDLW  1F
0646:  MOVWF  03
0647:  MOVLW  19
0648:  BSF    03.5
0649:  MOVWF  19
064A:  MOVLW  A6
064B:  MOVWF  18
064C:  MOVLW  90
064D:  BCF    03.5
064E:  MOVWF  18
064F:  MOVLW  FF
0650:  MOVWF  20
0651:  CLRF   23
0652:  CLRF   22
0653:  BSF    03.5
0654:  BSF    1F.0
0655:  BSF    1F.1
0656:  BSF    1F.2
0657:  BCF    1F.3
0658:  MOVLW  07
0659:  MOVWF  1C
065A:  BCF    03.7
.................... {  
....................    lcd_init(); 
065B:  BCF    03.5
065C:  GOTO   06B
....................    char msg[32];  
....................    delay_ms(50);      //allow oscillator to stabilise  
065D:  MOVLW  32
065E:  MOVWF  56
065F:  CALL   004
....................  
....................    while(TRUE){  
....................       delay_ms(1000);  
0660:  MOVLW  04
0661:  MOVWF  44
0662:  MOVLW  FA
0663:  MOVWF  56
0664:  CALL   004
0665:  DECFSZ 44,F
0666:  GOTO   662
....................       //sprintf(msg,"%3.2f%cC\r\n",do_everything(),0xB0);  
....................       sprintf(msg,"%01.2f%cC\r\n",do_everything(),0xB0); 
0667:  CALL   0A9
0668:  MOVF   7A,W
0669:  MOVWF  47
066A:  MOVF   79,W
066B:  MOVWF  46
066C:  MOVF   78,W
066D:  MOVWF  45
066E:  MOVF   77,W
066F:  MOVWF  44
0670:  CLRF   23
0671:  MOVLW  24
0672:  MOVWF  22
0673:  MOVLW  C9
0674:  MOVWF  04
0675:  MOVF   7A,W
0676:  MOVWF  4B
0677:  MOVF   79,W
0678:  MOVWF  4A
0679:  MOVF   78,W
067A:  MOVWF  49
067B:  MOVF   77,W
067C:  MOVWF  48
067D:  MOVLW  02
067E:  MOVWF  4C
067F:  GOTO   463
0680:  MOVLW  B0
0681:  MOVWF  55
0682:  CALL   456
0683:  MOVLW  43
0684:  MOVWF  55
0685:  CALL   456
0686:  MOVLW  0D
0687:  MOVWF  55
0688:  CALL   456
0689:  MOVLW  0A
068A:  MOVWF  55
068B:  CALL   456
....................       lcd_gotoxy(1,1); 
068C:  MOVLW  01
068D:  MOVWF  56
068E:  MOVWF  57
068F:  CALL   528
....................       printf(lcd_putc,"%01.2f%cC\r\n", do_everything(),0xB0); 
0690:  CALL   0A9
0691:  MOVF   7A,W
0692:  MOVWF  47
0693:  MOVF   79,W
0694:  MOVWF  46
0695:  MOVF   78,W
0696:  MOVWF  45
0697:  MOVF   77,W
0698:  MOVWF  44
0699:  MOVLW  C9
069A:  MOVWF  04
069B:  MOVF   7A,W
069C:  MOVWF  4B
069D:  MOVF   79,W
069E:  MOVWF  4A
069F:  MOVF   78,W
06A0:  MOVWF  49
06A1:  MOVF   77,W
06A2:  MOVWF  48
06A3:  MOVLW  02
06A4:  MOVWF  4C
06A5:  GOTO   566
06A6:  MOVLW  B0
06A7:  MOVWF  55
06A8:  CALL   53A
06A9:  MOVLW  43
06AA:  MOVWF  55
06AB:  CALL   53A
06AC:  MOVLW  0D
06AD:  MOVWF  55
06AE:  CALL   53A
06AF:  MOVLW  0A
06B0:  MOVWF  55
06B1:  CALL   53A
....................       printf("%s",msg);  
06B2:  MOVLW  24
06B3:  MOVWF  04
06B4:  BCF    03.7
06B5:  GOTO   62B
06B6:  GOTO   660
....................    }  
.................... } 
06B7:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
